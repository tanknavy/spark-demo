<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.tanknavy</groupId>
    <artifactId>spark</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>spark-core</module>
        <module>spark-sql</module>
        <module>spark-streaming</module>
        <!--kafka 0.10-->
        <module>spark-streaming2</module>
        <module>hbase</module>
        <module>kafka</module>
        <module>elasticsearch</module>
        <module>mongodb</module>
        <module>cassandra</module>
    </modules>


    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        
        <spark.version>2.3.3</spark.version>
        <scala.version>2.11.11</scala.version>
        <hadoop.version>2.9.1</hadoop.version>
        <hive.version>2.3.6</hive.version>
        <!--1.3.1 vs 2.0.6,后者还需要hbase-mapreduce-->
        <hbase.version>2.0.6</hbase.version>
        <elasticsearch.version>7.6.2</elasticsearch.version>

        <slf4j.version>1.7.25</slf4j.version>
        <log4j.version>1.2.17</log4j.version>

        <mysql.version>5.1.48</mysql.version>
        <spring.version>4.3.6.RELEASE</spring.version>
        <spring.data.jpa.version>2.1.11.RELEASE</spring.data.jpa.version>
        <quartz.version>2.2.3</quartz.version>
        <hibernate.version>5.3.12.Final</hibernate.version>
        <camel.version>2.18.2</camel.version>
        <config.version>1.10</config.version>
        <jackson.version>2.8.6</jackson.version>
        <servlet.version>3.0.1</servlet.version>
        <net.sf.json.version>2.4</net.sf.json.version>
        <activemq.version>5.14.5</activemq.version>
    </properties>


    <dependencies>
        <!--scope provided indicate the package will be provided in runtime, don't need to package-->
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <version>${scala.version}</version>
            <!-- <scope>provided</scope>打包到cluster环境无需这些依赖，但是本机上测试还是需要-->

        </dependency>

        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_2.11</artifactId>
            <version>${spark.version}</version>
            <!-- <scope>provided</scope>打包到cluster环境无需这些依赖，但是本机上测试还是需要-->

        </dependency>
        <dependency>
            <groupId>org.apache.hadoop</groupId>
            <artifactId>hadoop-client</artifactId>
            <version>${hadoop.version}</version>
            <!-- <scope>provided</scope>打包到cluster环境无需这些依赖，但是本机上测试还是需要-->

        </dependency>

        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.version}</version>
            <scope>provided</scope>
        </dependency>


        <!-- Logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <!-- Logging End -->
    </dependencies>


    <build>
        <!--pluginManagement在子module中必须引用才有效，否则会被无视，而plugins子module不引用就会自动继承-->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
        </plugins>
        <!--pluginManagement只声明不引入，子模块想用就用，定义所有module如果引用这个插件就会继承相关的行为，子类可以重写行为，如果module不引用就不会继承-->
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>net.alchim31.maven</groupId>
                    <artifactId>scala-maven-plugin</artifactId>
                    <version>3.4.6</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>compile</goal>
                                <goal>testCompile</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>3.0.0</version>
                    <executions>
                        <execution>
                            <id>make-assembly</id>
                            <phase>package</phase>
                            <goals>
                                <goal>single</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>




</project>